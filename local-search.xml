<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深入理解CAS</title>
    <link href="/2022/08/19/cas/"/>
    <url>/2022/08/19/cas/</url>
    
    <content type="html"><![CDATA[<h3 id="Java层面探究"><a href="#Java层面探究" class="headerlink" title="Java层面探究"></a><span class="label label-primary">Java层面探究</span></h3><p>Java中的原子类<code>Atomic</code>底层的实现原理是CAS，本文就让我们一起来深入探究CAS。<br>下面是<code>AtomicInteger</code>的测试代码 ，执行完毕后会发现原子类实例<code>ai</code>最终是精确的10000，而普通变量<code>bi</code>的值是一个小于10000的不固定的值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hw<span class="token punctuation">.</span>review2022<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCAS</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 被多个线程访问的变量     */</span>    <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> bi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 对ai和bi执行1000次自增     */</span>    <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//任务id</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread name : "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", Task id : "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", loop : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   ai<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   bi<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 创建含有3个线程的线程池         */</span>        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 在线程池中执行10个任务         */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">/**         * 等待线程池中的任务执行完毕后才去打印ai和bi的值         */</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ai is right : "</span> <span class="token operator">+</span> ai<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bi is wrong : "</span> <span class="token operator">+</span> bi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>上述代码的核心是 <code>AtomicInteger.addAndGet</code>方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token comment">/** * Atomically adds the given value to the current value. * * @param delta the value to add * @return the updated value */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> delta<span class="token punctuation">)</span> <span class="token operator">+</span> delta<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>首先我们看一下<code>AtomicInteger</code>类实例对象的内存布局</p><img src="/2022/08/19/cas/layout.png" class=""><p><code>this</code>指向了对象的起始地址，通过<code>this + valueOffset(=12)</code>我们就可以获得<code>value</code>字段的内存地址（即C&#x2F;C++中的指向<code>value</code>的指针），进而读写该<code>value</code>值。</p><p>然后我们接着看<code>Unsafe.getAndAddInt</code>方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//                             原子实例ai  valueOffset  delta(增量)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// var5: oldValue</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// var5 + var4: updateValue</span>     <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>var5</code>这个变量是通过<code>ai</code>的起始地址 + <code>valueOffset</code>偏移值获取到<code>value</code>的内存地址，进而获取到的<code>value</code>的值，我们把这个值称为<span class="label label-primary">oldValue</span></p><p><code>var5+var4</code>就是我们期望更新的值，我们把它叫做<span class="label label-info">updateValue</span></p><p>接下来发现<code>Unsafe.compareAndSwapInt</code>是一个 native 方法(就是在Java虚拟机中用 C&#x2F;C++ 实现的方法)</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="C-x2F-C-层面探究"><a href="#C-x2F-C-层面探究" class="headerlink" title="C&#x2F;C++层面探究"></a><span class="label label-success">C&#x2F;C++层面探究</span></h3><p>现在Java语言层面我们已经分析完了，完全看不到CAS具体是怎么实现的，接下来我们继续去探究JDK源码<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Github OpenJDK8源码](https://github.com/AdoptOpenJDK/openjdk-jdk8u)">[1]</span></a></sup></p><p><code>Unsafe.compareAndSwapInt</code>的源码所在目录为<code>hotspot/src/share/vm/prims/unsafe.cpp</code></p><p>这个方法的前两个参数不用去了解（JNI是Java调用C的方式），后四个参数和<code>Unsafe.compareAndSwapInt</code>方法的一一对应。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))  UnsafeWrapper(&quot;Unsafe_CompareAndSwapInt&quot;);  oop p &#x3D; JNIHandles::resolve(obj);  jint* addr &#x3D; (jint *) index_oop_from_field_offset_long(p, offset);  &#x2F;**   * x代表了期望更新的值updateValue   * addr代表了value这个字段的内存地址   * e代表了oldValue   *&#x2F;  return (jint)(Atomic::cmpxchg(x, addr, e)) &#x3D;&#x3D; e;UNSAFE_END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>继续往下分析来到了最核心的部分</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">inline</span> jint     Atomic<span class="token operator">::</span><span class="token function">cmpxchg</span>    <span class="token punctuation">(</span>jint     exchange_value<span class="token punctuation">,</span> <span class="token keyword">volatile</span> jint<span class="token operator">*</span>     dest<span class="token punctuation">,</span> jint     compare_value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> mp <span class="token operator">=</span> os<span class="token operator">::</span><span class="token function">is_MP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MP means multiprocessor，多处理器系统需要给cmpxchg指令加上lock前缀</span>  __asm__ <span class="token keyword">volatile</span> <span class="token punctuation">(</span><span class="token function">LOCK_IF_MP</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"cmpxchgl %1,(%3)"</span>                    <span class="token operator">:</span> <span class="token string">"=a"</span> <span class="token punctuation">(</span>exchange_value<span class="token punctuation">)</span>                    <span class="token operator">:</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>exchange_value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token punctuation">(</span>compare_value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span> <span class="token punctuation">(</span>mp<span class="token punctuation">)</span>                    <span class="token operator">:</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exchange_value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><code>cmpxchgl</code>是一个汇编指令（最后一个字符<code>l</code>代表了<code>cmpxchg</code>指令的参数类型为<code>jint</code>，对于<code>jlong</code>类型最后一个字符是<code>q</code>，不同操作系统可能会不同），所以我们需要去理解<code>cmpxchg</code>这条汇编指令。</p><h3 id="汇编层面探究"><a href="#汇编层面探究" class="headerlink" title="汇编层面探究"></a><span class="label label-danger">汇编层面探究</span></h3><p>下面给出我在C中实现的CAS来帮助大家理解CAS和<code>cmpxchg</code>指令。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pthread.h"</span></span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldValue<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> updateValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">atomic_add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">atomic_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/** * 被多个线程访问的共享变量 */</span><span class="token keyword">int</span> atomic_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/** * 测试代码 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">pthread_t</span> tid<span class="token punctuation">,</span> tid2<span class="token punctuation">,</span> tid3<span class="token punctuation">,</span> tid4<span class="token punctuation">,</span> tid5<span class="token punctuation">,</span> tid6<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建了6个子线程，tid为子线程id，task和atomic_task是子线程的任务函数     */</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid4<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> atomic_task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid5<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> atomic_task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid6<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> atomic_task<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/**     * 主线程等待6个子线程执行完才会往下执行printf     */</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid2<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid3<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid4<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid5<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>tid6<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"count is %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//预期最后的结果小于900000</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"atomic_count is %d\n"</span><span class="token punctuation">,</span> atomic_count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//预期最后的结果精确等于900000</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * * @param oldValue 最开始获取到的value值 * @param addr 多线程访问的变量的地址 * @param updateValue 期望更新的新值 * @return */</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldValue<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> updateValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> resValue<span class="token punctuation">;</span>    __asm__ <span class="token function">__volatile__</span> <span class="token punctuation">(</span><span class="token string">"lock\n\t"</span>                          <span class="token string">"cmpxchgl %2, (%3)"</span>                          <span class="token operator">:</span> <span class="token string">"=a"</span><span class="token punctuation">(</span>resValue<span class="token punctuation">)</span>                          <span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>updateValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>                          <span class="token operator">:</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/** * * @param addr 多线程访问变量的地址 * @param delta 这个变量想要增加的值 * @return */</span><span class="token keyword">void</span> <span class="token function">atomic_add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> oldValue<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        oldValue <span class="token operator">=</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">cmp</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> oldValue <span class="token operator">+</span> delta<span class="token punctuation">)</span> <span class="token operator">!=</span> oldValue <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">atomic_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">300000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">atomic_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>atomic_count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">300000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0.06ms</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>重点讲解一下<code>cmp</code>函数</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldValue<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> updateValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> resValue<span class="token punctuation">;</span>    __asm__ <span class="token function">__volatile__</span> <span class="token punctuation">(</span><span class="token string">"lock\n\t"</span>   <span class="token comment">//保证原子性</span>                          <span class="token string">"cmpxchgl %2, (%3)"</span> <span class="token comment">//核心指令</span>                          <span class="token operator">:</span> <span class="token string">"=a"</span><span class="token punctuation">(</span>resValue<span class="token punctuation">)</span> <span class="token comment">//输出列表</span>                          <span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>updateValue<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token comment">//输入列表</span>                          <span class="token operator">:</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//表明这条内联汇编会更改内存值和flag寄存器</span>    <span class="token keyword">return</span> resValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其实也就是我自己实现的JDK中的<code>Atomic::cmpxchg</code>函数，只不过更容易看懂一些。</p><p><span class="label label-primary">oldValue</span>就是我们先前获取到的<code>value</code>值，<code>addr</code>就是<code>value</code>字段的内存地址，在<code>cmpxchg</code>指令中会用到这个地址，<span class="label label-info">updateValue</span>就是我们期望更新的<code>value</code>值(<span class="label label-primary">oldValue</span>+增量<code>delta</code>)</p><p>以下关于内联汇编的知识大家可以去参考GCC-Inline-Assembly-HOWTO<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[GCC-Inline-Assembly-HOWTO](http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html)">[2]</span></a></sup></p><p>输入列表中：</p><p><code>&quot;a&quot;(oldValue)</code>：a代表EAX寄存器，意思是将变量<span class="label label-primary">oldValue</span>的值输入到EAX寄存器</p><p><code>&quot;r&quot;(updateValue) &quot;r&quot;(addr)</code>：意思是将变量<span class="label label-info">updateValue</span>和地址<code>addr</code>也放到寄存器中，r(register)代表一组寄存器，也就是从这一组寄存器中随便选一个存<span class="label label-info">updateValue</span>，随便选一个存<code>addr</code></p><p>输出列表中：</p><p><code>&quot;=a&quot;(resValue)</code>：表示内联汇编执行完后，将EAX寄存器的值存到<code>resValue</code>这个变量中。</p><p>我们在输出列表和输入列表中声明了许多变量，这些变量从<code>%0</code>开始依次往下标号，所以<code>%0</code>表示<code>resValue</code>，<code>%1</code>代表了<span class="label label-primary">oldValue</span>，<code>%2</code>代表了<span class="label label-info">updateValue</span>，<code>%3</code>代表了<code>addr</code>。</p><p>现在我们结合的<code>cmpxchg</code>指令的功能，来理解一下这段汇编到底在做什么。汇编语言有Intel和AT&amp;T两种语法，一般我们用的都是AT&amp;T这种，下面的讲解也是基于该语法的:</p><blockquote><p>cmpxchg 指令有两个操作数， 同时还使用了 EAX 寄存器。 首先，它将第二个操作数（目的操作数）和 EAX 寄存器相比较， 如果相同则把第一个操作数（源操作数）赋值给第二个操作数，否则将第一个操作数赋值给 EAX 寄存器</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">cmpxchgl %2, (%3) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>%2</code>是第一个操作数，即<span class="label label-info">updateValue</span>，也就是无冲突的时候我们期望更新的值</p><p><code>(%3)</code>是第二个操作数，即<code>(addr)</code>，<code>()</code>表示取值操作(相当于C语言中的<code>*</code>)，因为<code>addr</code>是<code>value</code>变量的地址，所以该操作数是在取此刻<code>value</code>的值<code>curValue</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//代表了a是一个指针，指向一个int变量，即a是该int变量的地址，*a表示取该int变量的值5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>首先将<span class="label label-primary">oldValue</span>存储到EAX寄存器中，然后用第二个操作数<code>curValue</code>和<span class="label label-primary">oldValue</span>行比较，如果相等，则说明从得到<span class="label label-primary">oldValue</span>到现在执行<code>cmpxchg</code>这条指令这段时间内，<code>value</code>没有被其他线程改写（抛开ABA问题不谈），没有发生冲突，所以我们就可以直接把我们希望更新的新值<span class="label label-info">updateValue</span>写入到<code>value</code>中，那我们再来看看<code>cmpxchg</code>这条指令干了啥，如果相同则把第一个操作数赋值给第二个操作数，也就是将<span class="label label-info">updateValue</span>赋值给<code>value</code>对象（成功更新<code>value</code>的值）。现在这条指令就执行完毕了，EAX寄存器中存储的还是<span class="label label-primary">oldValue</span>，所以最终<code>cmp</code>函数返回的也就是<span class="label label-primary">oldValue</span></p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">atomic_add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> oldValue<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        oldValue <span class="token operator">=</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">cmp</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> oldValue <span class="token operator">+</span> delta<span class="token punctuation">)</span> <span class="token operator">!=</span> oldValue <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个函数也就可以返回了，对应的就是Java中的<code>Unsafe.getAndAddInt</code>方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果EAX中保存的<span class="label label-primary">oldValue</span>和我们执行<code>cmpxchg</code>指令时获取的<code>curValue</code>不同，说明<code>value</code>的值被其他线程改写了，那此刻将第一个操作数<span class="label label-info">updateValue</span>赋值给 EAX 寄存器（我们并没有更新<code>value</code>的值），所以<code>cmp</code>函数返回的值为<span class="label label-info">updateValue</span>。<code>atomic_add</code>函数中<code>cmp</code>返回的<span class="label label-info">updateValue</span>和<span class="label label-primary">oldValue</span>不同，所以要重新执行<code>do while</code>循环去自旋，直到没有冲突发生。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><span class="label label-info">总结</span></h3><p>最后我们再用高级语言解释一下<code>cmpxchg</code>这条汇编指令的功能。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 被多个线程访问的value对象 */</span><span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">/** * 注意下面的逻辑是一条汇编指令完成的 * * @param addr value对象的内存地址 * @param oldValue 执行cmpxchg指令前当前线程获取到的value对象的值 * @param updateValue 期望更新的值 * @return */</span><span class="token keyword">int</span> <span class="token function">cmpxchg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> oldValue<span class="token punctuation">,</span> <span class="token keyword">int</span> updateValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> curValue <span class="token operator">=</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span> <span class="token comment">//获取最新的value的值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curValue <span class="token operator">==</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//无冲突则更新value值为updateValue并返回oldValue</span>        <span class="token operator">*</span>addr <span class="token operator">==</span> updateValue<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//发生冲突，直接返回updateValue，value对象的值没有更新哦</span>        <span class="token keyword">return</span> updateValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/AdoptOpenJDK/openjdk-jdk8u">Github OpenJDK8源码</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="http://www.ibiblio.org/gferg/ldp/GCC-Inline-Assembly-HOWTO.html">GCC-Inline-Assembly-HOWTO</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
      <category>线程</category>
      
      <category>并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C/C++</tag>
      
      <tag>Assembly</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
